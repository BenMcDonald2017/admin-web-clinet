functions:

  ####################################
  #   LAMBDA FUNCTION DECLARATIONS   #
  ####################################

  ping:
    description: Ping / Ping
    handler: build/routes/ping/index.pong
    events:
      - http:
          path: ping
          method: get
          cors: true
          documentation: { summary: 'Ping / Pong', description: 'Is service up and running?' }

  createEnvelope:
    handler: build/routes/envelope/create.get
    events:
      - http:
          path: envelope
          method: post
          cors: true
          documentation:
            summary: Create New Envelope
            description: Create New Envelope [POST]

  # post:
  #   handler: build/routes/examples/post/index.post
  #   description: ${self:custom.documentation.summary} | Example POST
  #   events:
  #     - http:
  #         path: examples/post
  #         method: post
  #         cors: true
  #         # An example of using a custom authorization function. (The function
  #         # is defined above: `example-custom-authorizer`)
  #         authorization: example-custom-authorizer
  #         documentation:
  #           summary: Example POST
  #           description: Example of a POST request/response.
  #           # As an example, we've blown up this particular function's
  #           # documentation so that you can get an idea of what's possible:
  #           queryParams: ''
  #           pathParams: ''
  #           requestHeaders: ''
  #           requestModels:
  #             application/json: ExamplePostRequest
  #           requestBody: Request body description
  #           methodResponses:
  #             -
  #               statusCode: '200'
  #               responseBody:
  #                 description: Response body description
  #               responseHeaders: ''
  #               responseModels:
  #                 application/json: ExamplePostResponse
  #             -
  #               statusCode: '400'
  #               responseModels:
  #                 application/json: ErrorResponse
  #
  # proxy-request:
  #   handler: build/routes/examples/proxy-request/index.proxy
  #   description: ${self:custom.documentation.summary} | Example Request Proxy
  #   events:
  #     - http:
  #         path: examples/proxy/{acronym}
  #         method: get
  #         cors: true
  #         documentation:
  #           summary: Example Proxying of an Incoming Request to Another API
  #           description: Example of how to proxy a request to another api and return that API's response as our own.
  #
  # example-schedule:
  #   handler: build/routes/examples/schedule/index.schedule
  #   description: ${self:custom.documentation.summary} | Scheduled Func Example
  #   events:
  #     - schedule:
  #         enabled: false # The `enabled` setting is _NOT_ required!
  #         # template set it to 'false' here so that it doesn't run.
  #         description: Example of How to Schedule Your Functions' Execution(s)
  #         rate: rate(2 minutes)
  #         documentation:
  #           summary: Example Scheduled Function
  #           description: Example of How to Schedule Your Functions' Execution(s).


# The following are a few example events you can configure a given lambda
# function to fire upon.
# NOTE: Please make sure to change your handler code to work with those events
# Check the event documentation for details
# ---------------------------------------------------
#       - http:
#           path: users/create
#           method: get
#       - s3: ${env:BUCKET}
#       - schedule: rate(10 minutes)
#       - sns: greeter-topic
#       - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#       - alexaSkill
#       - iot:
#           sql: "SELECT * FROM 'some_topic'"
#       - cloudwatchEvent:
#           event:
#             source:
#               - "aws.ec2"
#             detail-type:
#               - "EC2 Instance State-change Notification"
#             detail:
#               state:
#                 - pending
#       - cloudwatchLog: '/aws/lambda/hello'
#       - cognitoUserPool:
#           pool: MyUserPool
#           trigger: PreSignUp
#
#     Define function-specific environment variables here
#     environment:
#       variable2: value2

# You can add CloudFormation resource templates here
# resources:
#   Resources:
#     NewResource:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: my-new-bucket
#   Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
