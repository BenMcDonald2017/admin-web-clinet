####################################
#   AWS CLOUDFORMATION TEMPLATES   #
#       (...IN YAML SYNTAX)        #
####################################

# Below, are all of the "Resources" your "Functions" use.
# Raw AWS CloudFormation is expected in this file below

Resources:

  # SNSRole:
  #     Type: AWS::IAM::Role
  #     Properties:
  #       AssumeRolePolicyDocument:
  #         Version: "2012-10-17"
  #         Statement:
  #           - Effect: "Allow"
  #             Principal:
  #               Service:
  #                 - "cognito-idp.amazonaws.com"
  #             Action:
  #               - "sts:AssumeRole"
  #       Policies:
  #         - PolicyName: "CognitoSNSPolicy"
  #           PolicyDocument:
  #             Version: "2012-10-17"
  #             Statement:
  #               - Effect: "Allow"
  #                 Action: "sns:publish"
  #                 Resource: "*"
  #
  # CognitoUserPoolHixmeAuth:
  #   Type: AWS::Cognito::UserPool
  #   Properties:
  #     UserPoolName: ${file(src/config/custom.yml):service.STAGE}-auth-user-pool
  #     Policies:
  #       PasswordPolicy:
  #         MinimumLength: 8
  #         RequireUppercase: true
  #         RequireLowercase: true
  #         RequireNumbers: true
  #         RequireSymbols: false
  #     AutoVerifiedAttributes:
  #       - email
  #       - phone_number
  #     AliasAttributes:
  #       - email
  #       - phone_number
  #       - preferred_username
  #     MfaConfiguration: "OFF"
  #     # DeviceConfiguration:
  #     #   ChallengeRequiredOnNewDevice: true
  #     #   DeviceOnlyRememberedOnUserPrompt: true
  #     # EmailConfiguration:
  #     #   SourceArn: ""
  #     #   ReplyToEmailAddress: ""
  #     SmsConfiguration:
  #       ExternalId: ${file(src/config/custom.yml):service.STAGE}-auth-user-pool-external
  #       SnsCallerArn:
  #         Fn::GetAtt: [ SNSRole, Arn ]
  #       # SnsCallerArn: arn:aws:iam::409076796536:role/service-role/${file(src/config/custom.yml):service.STAGE}-platform-user-pool-sms-role
  #       # ExternalId: e891644b-0d09-427f-b4e3-49355b04ce5b
  #     UserPoolTags: ${file(src/config/custom.yml):environment}
  #     AdminCreateUserConfig:
  #       AllowAdminCreateUserOnly: false
  #       UnusedAccountValidityDays: 7
  #     Schema:
  #       - Name: email
  #         AttributeDataType: String
  #         Mutable: true
  #         Required: true
  #       - Name: phone_number
  #         AttributeDataType: String
  #         Mutable: true
  #         Required: true
  #       - Name: user-role
  #         AttributeDataType: String
  #         DeveloperOnlyAttribute: true
  #         Mutable: false
  #         StringAttributeConstraints:
  #           MinLength: "1"
  #           MaxLength: "512"
  #
  # # Creates a User Pool Client to be used by the identity pool
  # UserPoolClient:
  #   Type: AWS::Cognito::UserPoolClient
  #   Properties:
  #     ClientName: "${file(src/config/custom.yml):service.STAGE} auth user pool client"
  #     GenerateSecret: false
  #     UserPoolId:
  #       Ref: CognitoUserPoolHixmeAuth
  #
  # # Creates a federeated Identity pool
  # IdentityPool:
  #   Type: AWS::Cognito::IdentityPool
  #   Properties:
  #     IdentityPoolName: "${file(src/config/custom.yml):service.STAGE} auth identity pool"
  #     AllowUnauthenticatedIdentities: true
  #     CognitoIdentityProviders:
  #       - ClientId:
  #           Ref: UserPoolClient
  #         ProviderName:
  #           Fn::GetAtt: [ CognitoUserPoolHixmeAuth, ProviderName ]
  #
  # # Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
  # CognitoUnAuthorizedRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Principal:
  #             Federated: "cognito-identity.amazonaws.com"
  #           Action:
  #             - "sts:AssumeRoleWithWebIdentity"
  #           Condition:
  #             StringEquals:
  #               "cognito-identity.amazonaws.com:aud":
  #                 Ref: IdentityPool
  #             "ForAnyValue:StringLike":
  #               "cognito-identity.amazonaws.com:amr": unauthenticated
  #     Policies:
  #       - PolicyName: "CognitoUnauthorizedPolicy"
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: "Allow"
  #               Action:
  #                 - "mobileanalytics:PutEvents"
  #                 - "cognito-sync:*"
  #               Resource: "*"
  #
  # # Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invokation
  # # Only allows users in the previously created Identity Pool
  # CognitoAuthorizedRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Principal:
  #             Federated: "cognito-identity.amazonaws.com"
  #           Action:
  #             - "sts:AssumeRoleWithWebIdentity"
  #           Condition:
  #             StringEquals:
  #               "cognito-identity.amazonaws.com:aud":
  #                 Ref: IdentityPool
  #             "ForAnyValue:StringLike":
  #               "cognito-identity.amazonaws.com:amr": authenticated
  #     Policies:
  #       - PolicyName: "CognitoAuthorizedPolicy"
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: "Allow"
  #               Action:
  #                 - "mobileanalytics:PutEvents"
  #                 - "cognito-sync:*"
  #                 - "cognito-identity:*"
  #               Resource: "*"
  #             - Effect: "Allow"
  #               Action:
  #                 - "lambda:InvokeFunction"
  #               Resource: "*"
  #
  # # Assigns the roles to the Identity Pool
  # IdentityPoolRoleMapping:
  #   Type: AWS::Cognito::IdentityPoolRoleAttachment
  #   Properties:
  #     IdentityPoolId:
  #       Ref: IdentityPool
  #     Roles:
  #       authenticated:
  #         Fn::GetAtt: [ CognitoAuthorizedRole, Arn ]
  #       unauthenticated:
  #         Fn::GetAtt: [ CognitoUnAuthorizedRole, Arn ]
  #
  # # example of creating a dynamo table named 'Persons'
  # Persons:
  #   Type: AWS::DynamoDB::Table
  #   DeletionPolicy: Retain
  #   Properties:
  #     TableName: ${file(src/config/custom.yml):environment.service.dynamo_table}
  #     AttributeDefinitions:
  #       - AttributeName: email
  #         AttributeType: S
  #     KeySchema:
  #       - AttributeName: email
  #         KeyType: HASH
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 1
  #       WriteCapacityUnits: 1
  #
  #   # The following block is an example of a "trust relationship statement"
  #   # c.f., http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-stage-settings.html
  #   APIGatewayRole:
  #     Type: AWS::IAM::Role
  #     Properties:
  #       AssumeRolePolicyDocument:
  #         Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - "apigateway.amazonaws.com"
  #           Action:
  #             - "sts:AssumeRole"

Outputs:

  # an example of the "Outputs" that your AWS CloudFormation Stack should produce
  # it allows references between services during instantiation
  #
  # UserPoolId:
  #   Value:
  #     Ref: CognitoUserPoolHixmeAuth
  #   Export:
  #     Name: "CognitoUserPoolHixmeAuth::Id"
  # UserPoolClientId:
  #   Value:
  #     Ref: UserPoolClient
  #   Export:
  #     Name: "UserPoolClient::Id"
  # IdentityPoolId:
  #   Value:
  #     Ref: IdentityPool
  #   Export:
  #     Name: "IdentityPool::Id"
