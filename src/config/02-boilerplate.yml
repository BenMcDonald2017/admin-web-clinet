service:          ${self:custom.service.NAME}

frameworkVersion: ">=1.23.0 <2.0.0"

plugins:
  - serverless-plugin-webpack
  - serverless-aws-documentation
  - serverless-domain-manager
  - serverless-offline

package:
  individually:           true # package each lambda function individually
  excludeDevDependencies: false # we lean on webpack do the tree-shaking
  exclude:                ['node_modules/**/aws-sdk/**']

custom:
  service:
    NAME:         ${file(package.json):name}
    STAGE:        ${opt:stage, env:NODE_ENV, file(package.json):config.stage}
    REGION:       ${opt:region, file(package.json):config.region}
    RUNTIME:      ${file(package.json):config.runtime}
    VERSION:      ${file(package.json):version}
    DESCRIPTION:  ${file(package.json):description}
    GW_URL:
      Fn::Join:
        - ""
        - - https://
          - Ref: ApiGatewayRestApi
          - .execute-api.${self:custom.service.REGION}.amazonaws.com/${self:custom.service.STAGE}

  documentation:
    description:  "Hixme API | ${self:custom.service.DESCRIPTION}"
    summary:      ${self:custom.service.DESCRIPTION}
    version:      ${self:custom.service.VERSION}
    models:       ${file(schemas/all.yml)}
    # authorizers:  ${file(schemas/authorizers.yml)}
    resources:    ${file(schemas/resources.yml)}

  dotENV: &dotENV
    # finds a '.env' file, if any, and sets environment vars
    ${file(./env.js):getAndSetVarsFromEnvFile}

  stackTags:    &stackTags
    BASE_PATH:    ${self:custom.customDomain.basePath}
    DOMAIN_NAME:  ${self:custom.customDomain.domainName}
    REGION:       ${self:custom.service.REGION}
    SERVICE:      ${self:custom.service.NAME}
    STAGE:        ${self:custom.service.STAGE}
    VERSION:      ${self:custom.service.VERSION}

  environmentVariables: &environmentVariables
    # <<: [*stackTags, *dotENV] # ideally, this line would have worked
    <<: *stackTags
    DOCUSIGN_ACCOUNT_ID_PROD: ${self:custom.dotENV.DOCUSIGN_ACCOUNT_ID_PROD}
    DOCUSIGN_ACCOUNT_ID:      ${self:custom.dotENV.DOCUSIGN_ACCOUNT_ID}
    DOCUSIGN_BASE_URL_PROD:   ${self:custom.dotENV.DOCUSIGN_BASE_URL_PROD}
    DOCUSIGN_BASE_URL:        ${self:custom.dotENV.DOCUSIGN_BASE_URL}
    DOCUSIGN_IKEY_PROD:       ${self:custom.dotENV.DOCUSIGN_IKEY_PROD}
    DOCUSIGN_IKEY:            ${self:custom.dotENV.DOCUSIGN_IKEY}
    DOCUSIGN_PASSWORD_PROD:   ${self:custom.dotENV.DOCUSIGN_PASSWORD_PROD}
    DOCUSIGN_PASSWORD:        ${self:custom.dotENV.DOCUSIGN_PASSWORD}
    DOCUSIGN_USER_PROD:       ${self:custom.dotENV.DOCUSIGN_USER_PROD}
    DOCUSIGN_USER:            ${self:custom.dotENV.DOCUSIGN_USER}
    EFFECTIVE_DATE:           ${self:custom.dotENV.EFFECTIVE_DATE}
    HEALTH_BUNDLE:            ${self:custom.dotENV.HEALTH_BUNDLE}
    cartTable:                ${self:custom.dotENV.cartTable}
    personsTable:             ${self:custom.dotENV.personsTable}
    applicationTable:         ${self:custom.dotENV.applicationTable}
    applicationOutputBucket:  ${self:custom.dotENV.applicationOutputBucket}
    applicationSourceBucket:  ${self:custom.dotENV.applicationSourceBucket}

  customDomain:
    basePath:             ${file(./env.js):getAPIBasePath} # 'application'
    certificateName:      "*.hixme.com"
    createRoute53Record:  false # LEAVE THIS (route53 record already created!)
    domainName:           ${file(./env.js):getDomainName}
    stage:                ${file(./env.js):getDesiredStageFromPackageJSON}

  serverless-offline:
    prefix: ${self:custom.customDomain.basePath}

provider:
  name:       aws
  memorySize: 1024
  timeout:    30
  deploymentBucket:
    # Deployment bucket name. Default is generated by the framework
    # name: com.serverless.${self:provider.region}.deploys
    # using server-side encryption
    serverSideEncryption: AES256
  runtime:    ${self:custom.service.RUNTIME}
  stage:      ${self:custom.service.STAGE}
  region:     ${self:custom.service.REGION}
  stackTags:  *stackTags
  environment:
    <<:               *environmentVariables
    GW_URL:           ${self:custom.service.GW_URL}
    NODE_ENV:         ${self:custom.service.STAGE}
  iamRoleStatements:  ${self:custom.iamRoleStatements}
