service:          ${self:custom.service.NAME}

frameworkVersion: ">=1.23.0 <2.0.0"

plugins:
  - serverless-plugin-webpack
  - serverless-aws-documentation
  - serverless-domain-manager
  - serverless-offline

package:
  individually:           true # package each lambda function individually
  excludeDevDependencies: false # we lean on webpack do the tree-shaking
  exclude:                ['node_modules/**/aws-sdk/**']

custom:
  service:
    NAME:         ${file(package.json):name}
    STAGE:        ${opt:stage, env:NODE_ENV, file(package.json):config.stage}
    REGION:       ${opt:region, file(package.json):config.region}
    RUNTIME:      ${file(package.json):config.runtime}
    VERSION:      ${file(package.json):version}
    DESCRIPTION:  ${file(package.json):description}
    GW_URL:
      Fn::Join:
        - ""
        - - https://
          - Ref: ApiGatewayRestApi
          - .execute-api.${self:custom.service.REGION}.amazonaws.com/${self:custom.service.STAGE}

  documentation:
    description:  "Hixme API | ${self:custom.service.DESCRIPTION}"
    summary:      ${self:custom.service.DESCRIPTION}
    version:      ${self:custom.service.VERSION}
    models:       ${file(schemas/all.yml)}
    # authorizers:  ${file(schemas/authorizers.yml)}
    resources:    ${file(schemas/resources.yml)}

  # dotENV: &dotENV
    # finds a '.env' file, if any, and sets environment vars
    # ${file(./env.js):setEnvironmentVariables}

  stackTags:    &stackTags
    BASE_PATH:    ${self:custom.customDomain.basePath}
    DOMAIN_NAME:  ${self:custom.customDomain.domainName}
    REGION:       ${self:custom.service.REGION}
    SERVICE:      ${self:custom.service.NAME}
    STAGE:        ${self:custom.service.STAGE}
    VERSION:      ${self:custom.service.VERSION}

  environmentVariables: &environmentVariables
    # <<: [*stackTags, *dotENV] # ideally, this line would have worked
    <<: *stackTags
    applicationOutputBucket: ${self:custom:service:STAGE}-employee-documents
    applicationSourceBucket: ${self:custom:service:STAGE}-carrier-application-documents
    applicationTable: ${self:custom:service:STAGE}-carrier-applications
    cartTable: ${self:custom:service:STAGE}-cart
    DOCUSIGN_ACCOUNT_ID_PROD: 43952094
    DOCUSIGN_ACCOUNT_ID: 1840519
    DOCUSIGN_BASE_URL_PROD: https://na2.docusign.net/restapi/v2
    DOCUSIGN_BASE_URL: https://demo.docusign.net/restapi/v2
    DOCUSIGN_IKEY_PROD: 76039e56-0960-401b-b7c0-eaefc320f22e
    DOCUSIGN_IKEY: 76039e56-0960-401b-b7c0-eaefc320f22e
    DOCUSIGN_PASSWORD_PROD: Hixme@docusign1
    DOCUSIGN_PASSWORD: Hixme@docusign9
    DOCUSIGN_USER_PROD: cb0b2cc9-dc65-4c3f-9871-2008915871db
    DOCUSIGN_USER: b5860307-f4fd-4911-9e7f-659c7694257e
    EFFECTIVE_DATE: 20170101
    HEALTH_BUNDLE: HealthBundle
    personsTable: ${self:custom:service:STAGE}-persons
    # applicationOutputBucket: ${self:custom.service.STAGE}${ssm:applicationOutputBucket}
    # applicationSourceBucket: ${self:custom.service.STAGE}${ssm:applicationSourceBucket}
    # applicationTable: ${self:custom.service.STAGE}${ssm:applicationTable}
    # cartTable: ${self:custom.service.STAGE}${ssm:cartTable}
    # DOCUSIGN_ACCOUNT_ID_PROD: ${ssm:DOCUSIGN_ACCOUNT_ID_PROD}
    # DOCUSIGN_ACCOUNT_ID: ${ssm:DOCUSIGN_ACCOUNT_ID}
    # DOCUSIGN_BASE_URL_PROD: ${ssm:DOCUSIGN_BASE_URL_PROD}
    # DOCUSIGN_BASE_URL: ${ssm:DOCUSIGN_BASE_URL}
    # DOCUSIGN_IKEY_PROD: ${ssm:DOCUSIGN_IKEY_PROD}
    # DOCUSIGN_IKEY: ${ssm:DOCUSIGN_IKEY}
    # DOCUSIGN_PASSWORD_PROD: ${ssm:DOCUSIGN_PASSWORD_PROD}
    # DOCUSIGN_PASSWORD: ${ssm:DOCUSIGN_PASSWORD}
    # DOCUSIGN_USER_PROD: ${ssm:DOCUSIGN_USER_PROD}
    # DOCUSIGN_USER: ${ssm:DOCUSIGN_USER}
    # EFFECTIVE_DATE: ${ssm:EFFECTIVE_DATE}
    # HEALTH_BUNDLE: ${ssm:HEALTH_BUNDLE}
    # personsTable: ${self:custom.service.STAGE}${ssm:personsTable}

  customDomain:
    basePath:             ${file(./env.js):getAPIBasePath} # 'application'
    certificateName:      "*.hixme.com"
    createRoute53Record:  false # has already been done
    domainName:           ${file(./env.js):getDomainName}
    stage:                ${file(./env.js):packageStageName}

  serverless-offline:
    prefix: ${self:custom.customDomain.basePath}


provider:
  name:       aws
  memorySize: 1024
  timeout:    30
  deploymentBucket:
    # Deployment bucket name. Default is generated by the framework
    # name: com.serverless.${self:provider.region}.deploys
    # using server-side encryption
    serverSideEncryption: AES256
  runtime:    ${self:custom.service.RUNTIME}
  stage:      ${self:custom.service.STAGE}
  region:     ${self:custom.service.REGION}
  stackTags:  *stackTags
  environment:
    <<:               *environmentVariables
    GW_URL:           ${self:custom.service.GW_URL}
    NODE_ENV:         ${self:custom.service.STAGE}
